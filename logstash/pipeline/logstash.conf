input {
	beats {
		port => 5044
	}

	tcp {
		port => 50000
	}
}

## Add your filters / logstash plugins configuration here

filter {
	if [fields][fileid] == "filebeat-oc" {
		dissect {
			mapping => {
				"message" => "%{log_level}:root:Epoch:%{epoch_timestamp} - [%{msg_type}] %{internal_or_message};%{rastaSender};%{rastaReceiver};%{OrderID}-%{orderContent}"
			}
		}
		mutate {
			add_field => {
				"count" => 0
			}
		}
		mutate {
			convert => {
				"epoch_timestamp" => "integer"
				"count" => "integer"
			}
		}
		# STEP1
		if [msg_type] == "Interlocking_SENT" and "Answer" not in [orderContent] {
            mutate {
                add_field => { "STEP" => "1" }
				add_field => { "StartID" => "%{OrderID}S1" }
            }
		}
		else if [msg_type] == "Client_RECEIVED" {
            mutate {
                add_field => { "STEP" => "4" }
				add_field => { "EndID" => "%{OrderID}S3" }
				add_field => { "StartID" => "%{OrderID}S4" }
            }
		}
		else if [msg_type] == "Client_SENT" {
            mutate {
                add_field => { "STEP" => "5" }
				add_field => { "EndID" => "%{OrderID}S4" }
				add_field => { "StartID" => "%{OrderID}S5" }
			}
		}
		else if [msg_type] == "Interlocking_RECEIVED" and "Answer" in [orderContent] {
            mutate {
                add_field => { "STEP" => "8" }
				add_field => { "EndID" => "%{OrderID}S7E" }
				add_field => { "StartID" => "End" }
            }
		}

	} else if [fields][fileid] == "filebeat-rasta" {
		dissect {
			mapping => {
				"message" => "[%{hr_timestamp} (Epoch time: %{epoch_timestamp})][%{log_component}][%{msg_type}]%{msg_text}"
			}
		}
		if [msg_type] == "Rasta_RECEIVED" or [msg_type] == "Rasta_SENT"{
			dissect {
				mapping  => {
					"msg_text" => " %{msg_kind};%{rastaID_sender};%{rastaID_receiver};%{OrderID}-%{orderContent}"
				}
			}
		}
		mutate {
			add_field => {
				"count" => 0
			}
		}
		mutate {
			convert => {
				"epoch_timestamp" => "integer"
				"count" => "integer"
			}
		}
		if [msg_type] == "Rasta_SENT" and "Answer" not in [orderContent] {
            mutate {
                add_field => { "STEP" => "2" }
				add_field => { "EndID" => "%{OrderID}S1" }
				add_field => { "StartID" => "%{OrderID}S2" }
            }
		}
		else if [msg_type] == "Rasta_RECEIVED" and "Answer" not in [orderContent] {
            mutate {
                add_field => { "STEP" => "3" }
				add_field => { "EndID" => "%{OrderID}S2" }
				add_field => { "StartID" => "%{OrderID}S3" }
                add_tag => ["S2E", "S3A"]
            }
		}
		else if [msg_type] == "Rasta_SENT" and "Answer" in [orderContent] {
            mutate {
                add_field => { "STEP" => "6" }
				add_field => { "EndID" => "%{OrderID}S5" }
				add_field => { "StartID" => "%{OrderID}S6" }
                add_tag => ["S5E", "S6A"]
            }
		}
		else if [msg_type] == "Rasta_RECEIVED" and "Answer" in [orderContent] {
            mutate {
                add_field => { "STEP" => "7" }
				add_field => { "EndID" => "%{OrderID}S6" }
				add_field => { "StartID" => "%{OrderID}S7" }
				add_tag => ["S6E", "S7A"]
            }
		}
	}
	if ("" in [STEP]) {
		date {
			match => ['epoch_timestamp', "UNIX_MS"]
		}
		aggregate {
			task_id => "%{OrderID}"
			code => "
				map[event.get('StartID')] = event.get('epoch_timestamp')
				event.set('EventDurationInMicros', (event.get('epoch_timestamp').to_i - map[event.get('EndID')].to_i))
			"
			map_action => "create_or_update"
			add_tag => "metric"
			timeout => 10
		}
	}

}

output {
	elasticsearch {
		hosts => ["elasticsearch:9200"]
		user => "logstash_internal"
		password => "${LOGSTASH_INTERNAL_PASSWORD}"
	}
	if ("" in [STEP]) {
		csv {
			path => "/usr/share/logstash/output/logs.csv"
			fields => ["STEP", "OrderID", "epoch_timestamp"]
		}
	}
	#stdout { codec => rubydebug { metadata => true } }
}
